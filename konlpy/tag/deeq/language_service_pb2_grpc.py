# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import deeq.language_service_pb2 as baikal_dot_language_dot_language__service__pb2


class LanguageServiceStub(object):
    """Provides text analysis operations such as sentiment analysis and entity
    recognition.
    // Analyzes the sentiment of the provided text.
    rpc AnalyzeSentiment(AnalyzeSentimentRequest) returns (AnalyzeSentimentResponse) {
    }

    // Finds named entities (currently proper names and common nouns) in the text
    // along with entity types, salience, mentions for each entity, and
    // other properties.
    rpc AnalyzeEntities(AnalyzeEntitiesRequest) returns (AnalyzeEntitiesResponse) {
    }

    // Finds entities, similar to [AnalyzeEntities][google.cloud.language.v1.LanguageService.AnalyzeEntities] in the text and analyzes
    // sentiment associated with each entity and its mentions.
    rpc AnalyzeEntitySentiment(AnalyzeEntitySentimentRequest) returns (AnalyzeEntitySentimentResponse) {
    }
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeSyntax = channel.unary_unary(
                '/baikal.language.LanguageService/AnalyzeSyntax',
                request_serializer=baikal_dot_language_dot_language__service__pb2.AnalyzeSyntaxRequest.SerializeToString,
                response_deserializer=baikal_dot_language_dot_language__service__pb2.AnalyzeSyntaxResponse.FromString,
                )


class LanguageServiceServicer(object):
    """Provides text analysis operations such as sentiment analysis and entity
    recognition.
    // Analyzes the sentiment of the provided text.
    rpc AnalyzeSentiment(AnalyzeSentimentRequest) returns (AnalyzeSentimentResponse) {
    }

    // Finds named entities (currently proper names and common nouns) in the text
    // along with entity types, salience, mentions for each entity, and
    // other properties.
    rpc AnalyzeEntities(AnalyzeEntitiesRequest) returns (AnalyzeEntitiesResponse) {
    }

    // Finds entities, similar to [AnalyzeEntities][google.cloud.language.v1.LanguageService.AnalyzeEntities] in the text and analyzes
    // sentiment associated with each entity and its mentions.
    rpc AnalyzeEntitySentiment(AnalyzeEntitySentimentRequest) returns (AnalyzeEntitySentimentResponse) {
    }
    """

    def AnalyzeSyntax(self, request, context):
        """Analyzes the syntax of the text and provides sentence boundaries and
        tokenization along with part of speech tags, dependency trees, and other
        properties.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LanguageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeSyntax': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeSyntax,
                    request_deserializer=baikal_dot_language_dot_language__service__pb2.AnalyzeSyntaxRequest.FromString,
                    response_serializer=baikal_dot_language_dot_language__service__pb2.AnalyzeSyntaxResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'baikal.language.LanguageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LanguageService(object):
    """Provides text analysis operations such as sentiment analysis and entity
    recognition.
    // Analyzes the sentiment of the provided text.
    rpc AnalyzeSentiment(AnalyzeSentimentRequest) returns (AnalyzeSentimentResponse) {
    }

    // Finds named entities (currently proper names and common nouns) in the text
    // along with entity types, salience, mentions for each entity, and
    // other properties.
    rpc AnalyzeEntities(AnalyzeEntitiesRequest) returns (AnalyzeEntitiesResponse) {
    }

    // Finds entities, similar to [AnalyzeEntities][google.cloud.language.v1.LanguageService.AnalyzeEntities] in the text and analyzes
    // sentiment associated with each entity and its mentions.
    rpc AnalyzeEntitySentiment(AnalyzeEntitySentimentRequest) returns (AnalyzeEntitySentimentResponse) {
    }
    """

    @staticmethod
    def AnalyzeSyntax(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/baikal.language.LanguageService/AnalyzeSyntax',
            baikal_dot_language_dot_language__service__pb2.AnalyzeSyntaxRequest.SerializeToString,
            baikal_dot_language_dot_language__service__pb2.AnalyzeSyntaxResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
